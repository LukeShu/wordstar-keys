#!xkb //specify_lexicon_for_editor_display_style; tabsize=4

// Define Wordstar cursor control keys using capslock as the 'control' shift key
//
// e.g. ^S/^D moves left/right; ^E/^X moves up/down; ^A/^F word left/right; ^R/^C moves page Up/Down
// and ^Q acts as a prefix, e.g. ^QS/^QD moves to Home/End of line; ^QR/^QC start/end of document
// ^Y/^QY = delete to end of line (end of paragraph in a word processor - linux quirk)
// ^QF is find; ^L is re-find; ^QA is replace; ^QJ is goto line
// ^Backspace is delete word to the right
// ^KB/^KK turns on block marking selection mode; ^KH hides (releases) it.
// ^KS block_save file
// ^KY yank_block(i.e. cut); ^KC copy block
// ^KP block_paste -- not wordstar standard which doesn't have paste


// Implementation quirks
//
// It really is a shame that xkb doesn't let me issue two keystrokes or I could do a lot better.
// With two keystrokes I could implement:
//  ^Y (delete to end of line) issues ctrl-Shift-Delete which deletes to end of paragraph in a word processor
//  ^N (insert line) issues <Enter> key. There is no way to issue a second Left key afterward to make it stay on the same line like it should
//  ^QE/^QX (top/bottom of page): there is no standard function to do this in linux
//	^W/^Z (scroll up/down) issues ctrl-Up/Down which works in my editor but in few other apps.
//  ^KX/^KC automatically exit block mode afterward

// Main import: wordstar(keys)
default partial modifier_keys alphanumeric_keys
xkb_symbols "keys" {
	// when 'keys' invoked, include sub-sections from same file below
	replace "wordstar(qkeys)"
	include "wordstar(kkeys)"
};

// Wordstar keys with caps-q prefix
partial modifier_keys alphanumeric_keys
xkb_symbols "qkeys" {
	// Cursor motion and ^Q-prefix keys. These can be used without kkeys below if you want simplicity

	// Empty cells or 'NoSymbol' cells in the table means leave that table entry as it was (the original key functionality).
	// 'VoidSymbol' cells produce no key

	// This works by making capslock a Group+1 latch in xkb terminology which means it
	// moves all key lookups into the second set of square brackets in table below
	// ^Q key prefix is a level2 'latch' (same as shift) which moves the *next key* lookup 1 column right in the table to 'level 2'

	// Note1: the hex 0x---- keysym codes used here are in place of new keysym name definitions which would require
	// recompilation of xkb. They must match the same codes in wscompat so it can redirect to a different keyboard key.
	// The codes I've used are not not used by any keysyms in /usr/include/X11/keysymdef.h
	// Be aware that it is possible to put RedirectKey actions directly into this file without using 
	// keysym redirections or a compat file, but it makes the table unweildy. If you wish to do this, the syntax is as follows
	//	key <ASDF> {
	//		actions[Group1] = [RedirectKey(keycode=<QWER>, clearModifiers=AltGr+Shift, modifiers=Control), RedirectKey(...), ...],
	//		actions[Group...] = [...] };   // notice lack of comma after the last []

	// Note2: Beware that I tried making caps key a level3_latch and a level5_latch (see 'experiments' directory), but for some reason
	// it clears cells in google sheets -- annoying! So it's a group_latch instead.

	// Note3 keycode meanings: <AD02> is the W key: D means row D (spacebar row is row A) and key number 01 = 1 key from the left (i.e. from tab).
	// Other specially named keys like <BKSP> are defined in /usr/share/X11/xkb/keycodes/evdev

	replace "wordstar(caps_key)"	// Make caps key a group2 latch

	name[Group2] = "wskeys";
	// Note: it's really only a TWO_LEVEL table, but specify EIGHT_LEVEL for the level5 ^K stuff below.
	// Duplicate levels 1/2 into subsequent levels 3/4 entries to support the vestigal ^K latch (see note on 'vestigal' in kkeys below)
	// That way any level3 keys from a vestigal ^K latch after exiting blocking mode will perform their usual function, avoiding the confusing effects of the vestigal ^K
	key.type[Group2] = "EIGHT_LEVEL";
	key.groupsredirect = 1;		// if a key is missing in any group, revert to group 1

	// columns: { [], [^key, ^Qkey] };            // where ^=caps
	// ^Q=>Level2_Latch(=shift) -- create ^Q prefix key and make it look like the next key is pressed with shift
	key <AD01> { [], [ISO_Level2_Latch, VoidSymbol, ISO_Level2_Latch, VoidSymbol] };
	// ^W=>ctrl-Up=0xee00(scroll_up)
	key <AD02> { [], [0xee00, VoidSymbol, 0xee00, VoidSymbol] };
	// ^E=>Up
	key <AD03> { [], [Up, VoidSymbol, Up, VoidSymbol] };
	// ^R=>Page_Up; ^QR=>0xee02(ctrl-Home
	key <AD04> { [], [Page_Up, 0xee02, Page_Up, 0xee02] };
	// ^Y/^QY=>ctrl-Shift-Delete=0xee0b(delete_to_end_of_line/para)
	key <AD06> { [], [0xee0b, 0xee0b, 0xee0b, 0xee0b] };
	// ^A=>ctrl-Left=0xee04(word_left); ^QA=>ctrl-h=0xee06(search)
	key <AC01> { [], [0xee04, 0xee06, 0xee04, 0xee06] };
	// ^S=>Left; ^QS=>0xee0c(Home)
	key <AC02> { [], [Left, 0xee0c, Left, 0xee0c] };
	// ^D=>Right; ^QD=>0xee0d(End)
	key <AC03> { [], [Right, 0xee0d, Right, 0xee0d] };
	// ^F=>0xee05(ctrl-Right); ^QF=>ctrl-F=Find
	key <AC04> { [], [0xee05, Find, 0xee05, Find]  };
	// ^G=>delete next char
	key <AC05> { [], [Delete, VoidSymbol, Delete, VoidSymbol] };
	// ^H=>Backspace
	key <AC06> { [], [BackSpace, VoidSymbol, BackSpace, VoidSymbol] };
	// ^QJ=>Jump to line
	key <AC07> { [], [NoSymbol, 0xee1c, NoSymbol, 0xee1c] };
	// ^L=>F3(repeat_find)
	key <AC09> { [], [F3, VoidSymbol, F3, VoidSymbol] };
	// ^P=>0xee0e(ctrl-p=print)
	key <AD10> { [], [0xee0e, NoSymbol, 0xee0e, NoSymbol] };
	// ^Z=>ctrl-Down=0xee01(scroll_down)
	key <AB01> { [], [0xee01, VoidSymbol, 0xee01, VoidSymbol] };
	// ^X=>Down
	key <AB02> { [], [Down, VoidSymbol, Down, VoidSymbol] };
	// ^C=>Page_Down; ^QC->0xee03(ctrl-End)
	key <AB03> { [], [Page_Down, 0xee03, Page_Down, 0xee03] };
	// ^N=>insert_line
	key <AB06> { [], [Return, VoidSymbol, Return, VoidSymbol] };
	// ^Backspace=>0xee1d(ctrl-Del)
	key <BKSP> { [], [0xee1d] };
};

// Wordstar keys with caps-k prefix
partial modifier_keys alphanumeric_keys
xkb_symbols "kkeys" {
	include "wordstar(level5_enable)"  // includes code below

	// Note on 'vestigal' ^K keys: xkb has a really annoying quirk that makes ^KB/^KH implementation difficult and messy:
	// a key like ^KH that does group-shift or level-shift does not get recognised as a key by xkb's
	// unlatching mechanism. This means, for example that the latch is still in effect after ^KH, so the next key
	// pressed after ^KH will be looked up with the ^K level5 latch still in effect, shifting it in the table
	// This is especially awkward when entering/exiting block mode. The only way to distinguish
	// between a fake ^K and a real one is to have the ^K latch level different in block mode and normal mode.
	// That is why I have made it a Level3_Latch in block mode and Level5_Latch in normal mode.
	// Think carefully about how to fill up the vestigal key table entries: they should contain what the non ^K entry has.

	//caps=group+1
	//^Q=Level2_Latch (i.e. Shift)
	//^K=Level3_Latch in block mode
	//^K=Level5_Latch in non-block mode -- this must be different than in block mode so we can distinguish the false carryover ^K latch
	//^KK=Group3_Lock (added to caps' +1 group to produce Group4. Leave Group3 array empty to revert to Group1 if user lifts caps by accident)

	name[Group4] = "ws-mark-keys";
	key.type[Group2] = "EIGHT_LEVEL";	// see note re EIGHT_LEVEL in qkeys above
	key.type[Group4] = "FOUR_LEVEL";

	// If a key is missing in any group, revert to group 1
	// Note that this does not clamp groups, only keys. SetGroup(group=+2) always wraps
	// (e.g. a group 4 key that does SetGroup(group=+2) wraps around to group 2 since group 4 is the last possible group)
	key.groupsredirect = 1;

	// The first 4 slots in group2 of the table below should be set to NoSymbol to inherit them from qkeys above
	// Note that the vestigal Level5 ^K key latch from enter block mode will correctly wraps because of FOUR_LEVEL group size
	// *Note (below): when ^K is pressed immediately after ^KH block exit, then both level 3 and 5 are on, adding up to level7

	// columns: { [], [^key, ^Qkey, vestigal-(^Kkey, +^Kkey), ^Kkey, *Note], [], block:[^key,  ^Qkey,   ^Kkey,  +^Kkey] };            // where ^=caps;  +=shift
	// block-^Q=>Level2_Latch(=shift)
	key <AD01> { [], [], [], [ISO_Level2_Latch, VoidSymbol] };
	// block-^W=>ctrl-Up=0xee00(scroll_up)
	key <AD02> { [], [], [], [0xee00, VoidSymbol] };
	// block-^E=>0xe10(shift-Up)
	key <AD03> { [], [], [], [0xee10, VoidSymbol] };
	// block-^R=>0xee14(shift-Page_Up)
	key <AD04> { [], [], [], [0xee14, 0xee16] };
	// ^Y/^QY=0xee0b(delete_to_end_of_line); ^KY=>ctrl-x=0xee08(yank_block=cut);
	key <AD06> { [], [NoSymbol, NoSymbol, NoSymbol, NoSymbol, 0xee08], [], [0xee0b, 0xee0b, 0xee08] };
	// ^P=>0xee0e(ctrl-p=print); ^KP=>0xee09(block_paste=paste)
	key <AD10> { [], [NoSymbol, NoSymbol, NoSymbol, NoSymbol, 0xee09], [], [0xee0e, NoSymbol, 0xee09] };
	// block-^A=>shift-ctrl-Left=0xee1a(shift-ctrl-Left); block-^QA=>ctrl-h=0xee06(search)
	key <AC01> { [], [], [], [0xee1a, 0xee06] };
	// ^KS=>0xee0a(ctrl-s=save); block-^S=>0xee12(shift-Left); block-^QS=>0xee18(shift-Home); block-^KS=>0xee0a(ctrl-s=save)
	key <AC02> { [], [NoSymbol, NoSymbol, NoSymbol, NoSymbol, 0xee0a, NoSymbol, 0xee0a], [], [0xee12, 0xee18, 0xee0a] };
	// ^KD=>0xee07(copy=duplicate_block); block-^D=>0xee13(shift-End); block-^QD=>0xee19(shift-End)
	key <AC03> { [], [NoSymbol, NoSymbol, NoSymbol, NoSymbol, 0xee07, NoSymbol, 0xee07], [], [0xee13, 0xee19, 0xee07] };
	// block-^F=>0xee1b(shift-ctrl-Right); block-^QF=>ctrl-F=Find
	key <AC04> { [], [], [], [0xee1b, Find]  };
	// ^G=>delete next char
	key <AC05> { [], [], [], [Delete, VoidSymbol] };
	// block-^KH=>unblock (Shift_L performs un-shiftlock); block-^H=>BackSpace; block-^KH=>end_block
	key <AC06> { [], [], [], [BackSpace, VoidSymbol, 0xef01] };
	// ^K=>prefix_key(Level5_Latch); ^KK=>0xef03(start_block); block-^KK=>0xef01(hide_block)
	key <AC08> { [], [ISO_Level5_Latch, VoidSymbol, ISO_Level5_Latch, NoSymbol, 0xef03], [], [ISO_Level3_Latch, VoidSymbol, 0xef01] };
	// block-^L=>F3(repeat_find)
	key <AC09> { [], [], [], [F3, VoidSymbol] };
	// block-^Z=>ctrl-Down=0xee01(scroll_down)
	key <AB01> { [], [], [], [0xee01, VoidSymbol] };
	// ^KX=>ctrl-x=0xee08(block_cut); block-^X=>0xee11(shift-Down); block-^KX=>0xee08(block_cut)
	key <AB02> { [], [NoSymbol, NoSymbol, NoSymbol, NoSymbol, 0xee08, Nosymbol, 0xee08], [], [0xee11, VoidSymbol, 0xee08] };
	// ^KC=>ctrl-x=0xee07(copy_block); block-^C=>0xee15(shift-Page_Down); block-^QC=>0xee17(shift-ctrl-End); block-^KC=>0xee08(block_cut)
	key <AB03> { [], [NoSymbol, NoSymbol, NoSymbol, NoSymbol, 0xee07, NoSymbol, 0xee07], [], [0xee15, 0xee17, 0xee07] };
	// ^KB=>0xef03(start_block); block-^KB=>0xef01(hide_block)
	key <AB05> { [], [VoidSymbol, VoidSymbol, VoidSymbol, VoidSymbol, 0xef03], [], [VoidSymbol, VoidSymbol, 0xef01] };
};

// Make capslock generate the level3 modifier
partial modifier_keys
xkb_symbols "caps_key" {
	key <CAPS> {
		type = "TWO_LEVEL",
		// caps=>group+1; shift-caps=>revert to group1 (in case it gets stuck in another group when ^KH isn't working)
		[0xef00, 0xef01], [0xef00, 0xef01], [0xef00, 0xef01], [0xef00, 0xef01]
	};
};

// For Level5_Shift to work, must map a real (non-virtual) modifier to it. Don't know why it needs this.
partial modifier_keys
xkb_symbols "level5_enable" {
	// This code is stolen from 'include "level5(modifier_mapping)"' but with different key.
	// Instead of using the <MDSW> key (for which the compiler complains that "<MDSW>
	// is added to map for multiple modifiers" and ignores one of the definitions, making operation flakey),
	// I've chosen key <FK24> because it's unlikely to be used
	// If you want a real key, say <RCTL> as a level 5 shift.
	// (But why would you want that when you have our key combo to do it?)
	// see /usr/share/X11/xkb/keycodes/evdev for key definitions like <FK24>
	key <FK24> {
		type[Group1] = "ONE_LEVEL",  // must be in group 1 for Level5_Shift to work in group 1
		symbols[Group1] = [ISO_Level5_Shift]
	};
	modifier_map Mod3 { <FK24> };
};
