#!xkb //specify_lexicon_for_editor_display_style; tabsize=4

// Define Wordstar cursor control keys using capslock as the 'control' shift key
//
// e.g. ^S/^D moves left/right; ^E/^X moves up/down; ^A/^F word left/right; ^R/^C moves page Up/Down
// and ^Q acts as a prefix, e.g. ^QS/^QD moves to Home/End of line; ^QR/^QC start/end of document
// ^Y/^QY = delete to end of line (end of paragraph in a word processor - linux quirk)
// ^QF is find; ^L is re-find; ^QA is replace ^QJ is goto line
// ^Backspace is delete word to the right

// Implementation quirks
//
// All keys defined to come after ^Q will clobber their orignal 'level3' (i.e. AltGr) meaning.
// and ^Q will function as an AltGr latch for the next keypress.
//
// It really is a shame that xkb doesn't let me issue two keystrokes or I could do a lot better.
// With two keystrokes I could implement:
//  ^Y (delete to end of line) issues ctrl-Shift-Delete which deletes to end of paragraph in a word processor
//  ^N (insert line) issues <Enter> key. There is no way to issue a second Left key afterward to make it stay on the saame line like it should
//  ^QE/^QX (top/bottom of page): there is no standard function to do this in linux
//	^W/^Z (scroll up/down) issues ctrl-Up/Down which works in my editor but in few other apps.

// I also tried to implement ^KK keys to define block mode in a separate keyboard group using shift-arrows for block.
// It worked but was unweildy because there was no way to turn off block mode using the same key as another action,
// like cut. This meant that block mode was frequently on after an operation when you didn't expect it to be, and it
// often caused blocks of text to be deleted. Using groups also prevented using my greek keyboard layout as group 2
// (I had to switch to it as the main keyboard group, meant that system hotkeys keys didn't fall back to english hotkeys
// and so didn't work as expected). I will retain the ^KK version in a subfolder as it was done well and was a masterful
// example of what can be done with xkb in a pinch.

// Wordstar keys with caps-q prefix
default partial modifier_keys alphanumeric_keys
xkb_symbols "keys" {
	// Cursor motion and ^Q-prefix keys.

	// Empty cells or 'NoSymbol' cells in the table means leave that table entry as it was (the original key functionality).
	// 'VoidSymbol' cells produce no key

	// In xkb terminology, shift is a level-2 'shift' which means that while it is held down
	// it moves all key lookups right in the table by 1 level (from level 1 to 2).
	// I've defined capslock as a level-5 'shift' (4 levels to the right).
	// ^Q key prefix is a level3 'latch' which moves the *next key* lookup 2 more columns right in the table

	// Note1: the hex 0x---- keysym codes used here are in place of new keysym name definitions which would require
	// recompilation of xkb. They must match the same codes in wscompat so it can redirect to a different keyboard key.
	// The codes I've used are not not used by any keysyms in /usr/include/X11/keysymdef.h
	// Be aware that it is possible to put RedirectKey actions directly into this file without using 
	// keysym redirections or a compat file, but it makes the table unweildy. If you wish to do this, the syntax is as follows
	//	key <ASDF> {
	//		actions[Group1] = [RedirectKey(keycode=<QWER>, clearModifiers=AltGr+Shift, modifiers=Control), RedirectKey(...), ...],
	//		actions[Group...] = [...] };   // notice lack of comma after the last []

	// Note2: Beware that I tried making caps key a level3_shift, but for some reason it clears cells in google sheets -- annoying!
	// So it's a level 5 shift instead, but it still doesn't work in google sheets despite initial tests. What's changed since then?

	// Note3 keycode meanings: <AD02> is the W key: D means row D (spacebar row is row A) and key number 01 = 1 key from the left (i.e. from tab).
	// Other specially named keys like <BKSP> are defined in /usr/share/X11/xkb/keycodes/evdev

	key.type[Group1] = "EIGHT_LEVEL";	// a modification to EIGHT_LEVEL so I can redefine BKSP and retain Terminate_Server

	// columns: { [NoSymbol, NoSymbol, NoSymbol, NoSymbol, ^key, +^key, ^Qkey, +^Qkey] };            // where ^=caps
 	// ^Q=>Level3_Latch -- create ^Q prefix key and make it look like the next key is pressed with AltGr
 	key <AD01> { [NoSymbol, NoSymbol, NoSymbol, NoSymbol, ISO_Level3_Latch, ISO_Level3_Latch, VoidSymbol, VoidSymbol] };
	// ^W=>ctrl-Up=0xee00(scroll_up)
	key <AD02> { [NoSymbol, NoSymbol, NoSymbol, NoSymbol, 0xee00, 0xee00] };
	// ^E=>Up
	key <AD03> { [NoSymbol, NoSymbol, NoSymbol, NoSymbol, Up, 0xee10] };
	// ^R=>Page_Up; ^QR=>0xee02(ctrl-Home
	key <AD04> { [NoSymbol, NoSymbol, NoSymbol, NoSymbol, Page_Up, 0xee14, 0xee02, 0xee16] };
	// ^Y/^QY=>ctrl-Shift-Delete=0xee0b(delete_to_end_of_line/para)
	key <AD06> { [NoSymbol, NoSymbol, NoSymbol, NoSymbol, 0xee0b, VoidSymbol, 0xee0b, VoidSymbol] };
	// ^A=>ctrl-Left=0xee04(word_left); ^QA=>ctrl-h=0xee06(search)
	key <AC01> { [NoSymbol, NoSymbol, NoSymbol, NoSymbol, 0xee04, 0xee1a, 0xee06, 0xee06] };
	// ^S=>Left; ^QS=>0xee0c(Home)
	key <AC02> { [NoSymbol, NoSymbol, NoSymbol, NoSymbol, Left, 0xee12, 0xee0c, 0xee18] };
	// ^D=>Right; ^QD=>0xee0d(End)
	key <AC03> { [NoSymbol, NoSymbol, NoSymbol, NoSymbol, Right, 0xee13, 0xee0d, 0xee19 ] };
	// ^F=>0xee05(ctrl-Right); ^QF=>ctrl-F=Find
	key <AC04> { [NoSymbol, NoSymbol, NoSymbol, NoSymbol, 0xee05, 0xee1b, Find, Find]  };
	// ^G=>delete next char
	key <AC05> { [NoSymbol, NoSymbol, NoSymbol, NoSymbol, Delete, Delete, Delete, Delete] };
	// ^H=>Backspace
	key <AC06> { [NoSymbol, NoSymbol, NoSymbol, NoSymbol, BackSpace, BackSpace, BackSpace, BackSpace] };
	// ^QJ=>Jump to line
	key <AC07> { [NoSymbol, NoSymbol, NoSymbol, NoSymbol, NoSymbol, NoSymbol, 0xee1c, 0xee1c] };
	// ^K=>block latch; implemented to be same as ^Q so we can define just a few common ^K sequences, not block ones since it does not work well in xkb (see notes above)
	key <AC08> { [NoSymbol, NoSymbol, NoSymbol, NoSymbol, ISO_Level3_Latch, ISO_Level3_Latch, VoidSymbol, VoidSymbol] };
	// ^L=>F3(repeat_find)
	key <AC09> { [NoSymbol, NoSymbol, NoSymbol, NoSymbol, F3, F3, F3, F3] };
	// ^P=>0xee0e(ctrl-p=print)
	key <AD10> { [NoSymbol, NoSymbol, NoSymbol, NoSymbol, 0xee0e, NoSymbol, 0xee0e, NoSymbol] };
	// ^Z=>ctrl-Down=0xee01(scroll_down)
	key <AB01> { [NoSymbol, NoSymbol, NoSymbol, NoSymbol, 0xee01, 0xee01] };
	// ^X=>Down
	key <AB02> { [NoSymbol, NoSymbol, NoSymbol, NoSymbol, Down, 0xee11] };
	// ^C=>Page_Down; ^QC->0xee03(ctrl-End)
	key <AB03> { [NoSymbol, NoSymbol, NoSymbol, NoSymbol, Page_Down, 0xee15, 0xee03, 0xee17] };
	// ^N=>insert_line
	key <AB06> { [NoSymbol, NoSymbol, NoSymbol, NoSymbol, Return] };

	// ^Backspace=>0xee1d(ctrl-Del)
	include "wordstar-test(ctrl_alt_bksp)"

	include "wordstar-test(level5_enable)"	// see below
	include "level3(modifier_mapping)"	// enables ISO_Level3_Latch by mapping it to a real modifier (^Q key doesn't count - quirky xkb requirement)
};

partial modifier_keys
xkb_symbols "ctrl_alt_bksp" {
    key <BKSP> {
        type="EIGHT_LEVEL_CTRL",		// Put Ctrl+Alt on Level4 for this key to allow us us to reinstate terminate server. Not sure if this is a good idea.
        symbols[Group1] = [ NoSymbol, NoSymbol, NoSymbol, Terminate_Server, 0xee1d]
    };
};

// For Level5_Shift to work, must map a real (non-virtual) modifier to it. Don't know why it needs this.
partial modifier_keys
xkb_symbols "level5_enable" {
	// This code is stolen from 'include "level5(modifier_mapping)"' but with different key.
	// Instead of using the <MDSW> key (for which the compiler complains that "<MDSW>
	// is added to map for multiple modifiers" and ignores one of the definitions, making operation flakey),
	// I've chosen key <FK24> because it's unlikely to be used
	// If you want a real key, say <RCTL> as a level 5 shift.
	// (But why would you want that when you have our key combo to do it?)
	// see /usr/share/X11/xkb/keycodes/evdev for key definitions like <FK24>
	key <CAPS> {
		type[Group1] = "ONE_LEVEL",  // must be in group 1 for Level5_Shift to work in group 1
		symbols[Group1] = [ISO_Level5_Shift]
	};
	modifier_map Mod2 { <CAPS> };
};
