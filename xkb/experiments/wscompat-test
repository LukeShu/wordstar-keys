#!xkb #specify_lexicon_for_editor_display_style; tabsize=4
// Define xkb 'compat' file key interpretations for wordstar cursor controls

// Note: the hex 0x---- keysym codes used here are invented but they must match the ones used in wordstar file

default partial xkb_compatibility "redirects" {
	// Note: keycodes are of the form <AD02> for the W key: D means row D (spacebar row is row A) and key number 01 = 1 key from the left (i.e. from tab),
	// and function keys are <FK0x>; the rest are found in /usr/share/X11/xkb/keycodes/evdev.

	// Implement various key redirections that could not be done with bare keys.
	// Redirections like these are necessary if you want to press a key with Ctrl or Shift
	// Note clearing Mod3 is equivalent to clearning ISO_Level5_Shift -- defined in main file
	interpret 0xee00 {  // ^W ctrl-Up (scroll up)
		action = RedirectKey(keycode=<UP>, clearModifiers=AltGr+Shift+Mod3, modifiers=Control);
	};
	interpret 0xee01 {  // ^Z ctrl-Down (scroll down)
		action = RedirectKey(keycode=<DOWN>, clearModifiers=AltGr+Shift+Mod3, modifiers=Control);
	};

	interpret 0xee02 {  // ^QR ctrl-Home
		action = RedirectKey(keycode=<HOME>, clearModifiers=AltGr+Shift+Mod3, modifiers=Control);
	};
	interpret 0xee03 {  // ^QC ctrl-End
		action = RedirectKey(keycode=<END>, clearModifiers=AltGr+Shift+Mod3, modifiers=Control);
	};

	interpret 0xee04 {  // ^A ctrl-Left (word left)
		action = RedirectKey(keycode=<LEFT>, clearModifiers=AltGr+Shift+Mod3, modifiers=Control);
	};
	interpret 0xee05 {  // ^F ctrl-Left (word right)
		action = RedirectKey(keycode=<RGHT>, clearModifiers=AltGr+Shift+Mod3, modifiers=Control);
	};

	interpret Find {  // ^QF ctrl-f (find)
		action = RedirectKey(keycode=<AC04>, clearModifiers=AltGr+Shift+Mod3, modifiers=Control);
	};
	interpret 0xee06 {  // ^QA ctrl-h (replace)
		action = RedirectKey(keycode=<AC06>, clearModifiers=AltGr+Shift+Mod3, modifiers=Control);
	};

	interpret 0xee07 {  // ^KC ctrl-c (copy_block)
		action = RedirectKey(keycode=<AB03>, clearModifiers=AltGr+Shift+Mod3, modifiers=Control);
	};
	interpret 0xee08 {  // ^KC ctrl-x (cut_block)
		action = RedirectKey(keycode=<AB02>, clearModifiers=AltGr+Shift+Mod3, modifiers=Control);
	};
	interpret 0xee09 {  // ^KP ctrl-v (paste_block)
		action = RedirectKey(keycode=<AB04>, clearModifiers=AltGr+Shift+Mod3, modifiers=Control);
	};
	interpret 0xee0a {  // ^KS ctrl-c (save)
		action = RedirectKey(keycode=<AC02>, clearModifiers=AltGr+Shift+Mod3, modifiers=Control);
	};

	interpret 0xee0b {  // ^QY ctrl-Shift-Delete (to be used as part of delete-to-end-of-line)
		action = RedirectKey(keycode=<DELE>, clearModifiers=AltGr+Mod3, modifiers=Shift+Control);
	};

	interpret 0xee0c {  // ^QS Home (unshifted)
		action = RedirectKey(keycode=<HOME>, clearModifiers=AltGr+Shift+Mod3);
	};
	interpret 0xee0d {  // ^QD End (unshifted)
		action = RedirectKey(keycode=<END>, clearModifiers=AltGr+Shift+Mod3);
	};

	interpret 0xee0e {  // ^P ctrl-P (print)
		action = RedirectKey(keycode=<AD10>, clearModifiers=AltGr+Shift+Mod3, modifiers=Control);
	};

	interpret 0xee0f {  // ^QJ=>ctrl-G (jump to line)
		action = RedirectKey(keycode=<AC05>, clearModifiers=AltGr+Shift+Mod3, modifiers=Control);
	};

	interpret F3 {  // ^L (repeat_find: remove AltGr modifier so it works even while caps held down)
		action = RedirectKey(keycode=<FK03>, clearModifiers=AltGr+Shift+Mod3);
	};

	// ===============================================
	// Now define codes needed for cursor motion in block selection mode

	// Define cursor keys for block mode selection
	interpret 0xee10 {  // block-^E=>shift-Up
		action = RedirectKey(keycode=<UP>, clearModifiers=AltGr+Mod3, modifiers=Shift);
	};
	interpret 0xee11 {  // block-^X=>shift-Down
		action = RedirectKey(keycode=<DOWN>, clearModifiers=AltGr+Mod3, modifiers=Shift);
	};

	interpret 0xee1a {  // block-^A=>shift-ctrl-Left
		action = RedirectKey(keycode=<LEFT>, clearModifiers=AltGr+Mod3, modifiers=Shift+Control);
	};
	interpret 0xee1b {  // block-^F=>shift-ctrl-Right
		action = RedirectKey(keycode=<RGHT>, clearModifiers=AltGr+Mod3, modifiers=Shift+Control);
	};

	interpret 0xee12 {  // block-^S=>shift-Left
		action = RedirectKey(keycode=<LEFT>, clearModifiers=AltGr+Mod3, modifiers=Shift);
	};
	interpret 0xee13 {  // block-^D=>shift-Right
		action = RedirectKey(keycode=<RGHT>, clearModifiers=AltGr+Mod3, modifiers=Shift);
	};

	interpret 0xee18 {  // block-^QS=>shift-Home
		action = RedirectKey(keycode=<HOME>, clearModifiers=AltGr+Mod3, modifiers=Shift);
	};
	interpret 0xee19 {  // block-^QD=>shift-End
		action = RedirectKey(keycode=<END>, clearModifiers=AltGr+Mod3, modifiers=Shift);
	};

	interpret 0xee14 {  // block-^R=>shift-Page_Up
		action = RedirectKey(keycode=<PGUP>, clearModifiers=AltGr+Mod3, modifiers=Shift);
	};
	interpret 0xee15 {  // block-^C=>shift-Page_Down
		action = RedirectKey(keycode=<PGDN>, clearModifiers=AltGr+Mod3, modifiers=Shift);
	};

	interpret 0xee16 {  // block-^QR=>shift-ctrl-Home
		action = RedirectKey(keycode=<HOME>, clearModifiers=AltGr+Mod3, modifiers=Shift+Control);
	};
	interpret 0xee17 {  // block-^QC=>shift-ctrl-End
		action = RedirectKey(keycode=<END>, clearModifiers=AltGr+Mod3, modifiers=Shift+Control);
	};

	interpret 0xee1c {  // ^QJ=>ctrl-G (jump to line)
		action = RedirectKey(keycode=<AC05>, clearModifiers=AltGr+Shift+Mod3, modifiers=Control);
	};

	interpret 0xee1d {  // ^Backspace=>ctrl-G (jump to line)
		action = RedirectKey(keycode=<DELE>, clearModifiers=AltGr+Shift+Mod3, modifiers=Control);
	};

	// ===============================================
	// See if we can get keys to produce scroll wheel events.

	// Not sure why this doesn't work. Leave it here to prove I've tried it.
	// Instead, I've used ctrl+Up/Down for scroll as some editors scroll that way
//~   interpret Pointer_Button4 {
//~     action = PointerButton(button=4);
//~   };
//~   interpret Pointer_Button5 {
//~     action = PointerButton(button=5);
//~   };
};
